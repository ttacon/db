package main

import "github.com/ttacon/pouch"

// THIS FILE IS GENERATED BY pouch.
// EDIT AT YOUR OWN PERIL.

func (i *Food) IdentifiableFields() ([]string, []interface{}) {
	var (
		cols   []string
		fields []interface{}
	)
	// adding primary key column/field pair ID
	cols = append(cols, "ID")
	fields = append(fields, i.ID)
	return cols, fields
}

func (i *Food) FieldsFor(fs []string) []interface{} {
	var fields = make([]interface{}, len(fs))

	for ii, f := range fs {
		switch f {
		case "ID":
			fields[ii] = &i.ID
		case "Name":
			fields[ii] = &i.Name
		case "NullableField":
			fields[ii] = &i.NullableField
		}
	}
	return fields
}

func (i *Food) InsertableFields() ([]string, []interface{}) {
	return nil, nil
}

func (i *Food) SetIdentifier(d interface{}) error {
	id, _ := d.(int64)
	i.ID = int(id)
	return nil
}

func (t *Food) Table() string {
	return "Food"
}

func (f *Food) FindableCopy() pouch.Findable {
	return &Food{}
}

func (g *Food) GetFieldsFor(fs []string) []interface{} {
	var fields = make([]interface{}, len(fs))

	for i, f := range fs {
		switch f {
		case "ID":
			fields[i] = &g.ID
		case "Name":
			fields[i] = &g.Name
		case "NullableField":
			fields[i] = &g.NullableField
		}
	}
	return fields
}

func (g *Food) GetAllFields() ([]string, []interface{}) {
	var cols = []string{
		"ID",
		"Name",
		"NullableField",
	}
	var fields = []interface{}{
		&g.ID,
		&g.Name,
		&g.NullableField,
	}
	return cols, fields
}
